diff --git a/lib/Finance/Quote.pm b/lib/Finance/Quote.pm
index 6e383b2..e3f3ac7 100644
--- lib/Finance/Quote.pm
+++ lib/Finance/Quote.pm
@@ -252,25 +252,32 @@ sub currency {
 
   my $ALPHAVANTAGE_API_KEY = $ENV{'ALPHAVANTAGE_API_KEY'};
   return undef unless ( defined $ALPHAVANTAGE_API_KEY );
- 
-  my $reply = $ua->request(GET "${ALPHAVANTAGE_CURRENCY_URL}"
-    . "&from_currency=" . ${from}
-    . "&to_currency=" . ${to}
-    . "&apikey=" . ${ALPHAVANTAGE_API_KEY} );
-
-  my $code = $reply->code;
-  my $desc = HTTP::Status::status_message($code);
-  return undef unless ($code == 200);
-  
-  my $body = $reply->content;
-
-  my $json_data = JSON::decode_json $body;
-  if ( !$json_data || $json_data->{'Error Message'} ) {
-    return undef;
-  }
-  
+
+  my $try_cnt = 0;
+  my $json_data;
+  do {
+    $try_cnt += 1;
+    my $reply = $ua->request(GET "${ALPHAVANTAGE_CURRENCY_URL}"
+      . "&from_currency=" . ${from}
+      . "&to_currency=" . ${to}
+      . "&apikey=" . ${ALPHAVANTAGE_API_KEY} );
+
+    my $code = $reply->code;
+    my $desc = HTTP::Status::status_message($code);
+    return undef unless ($code == 200);
+
+    my $body = $reply->content;
+
+    $json_data = JSON::decode_json $body;
+    if ( !$json_data || $json_data->{'Error Message'} ) {
+      return undef;
+    }
+    # print "Failed: " . $json_data->{'Note'} . "\n" if (($try_cnt < 5) && ($json_data->{'Note'}));
+    sleep (20) if (($try_cnt < 5) && ($json_data->{'Information'} || $json_data->{'Note'}));
+  } while (($try_cnt < 5) && ($json_data->{'Information'} || $json_data->{'Note'}));
+
   my $exchange_rate = $json_data->{'Realtime Currency Exchange Rate'}->{'5. Exchange Rate'};
-  
+
   {
     local $^W = 0;  # Avoid undef warnings.
 
diff --git a/lib/Finance/Quote/AlphaVantage.pm b/lib/Finance/Quote/AlphaVantage.pm
index e9157c7..ba3ab5d 100755
--- lib/Finance/Quote/AlphaVantage.pm
+++ lib/Finance/Quote/AlphaVantage.pm
@@ -25,6 +25,14 @@ require 5.005;
 use strict;
 use JSON qw( decode_json );
 use HTTP::Request::Common;
+use Time::HiRes qw(usleep clock_gettime);
+
+# Alpha Vantage recommends that API call frequency does not extend far
+# beyond ~1 call per second so that they can continue to deliver
+# optimal server-side performance:
+#   https://www.alphavantage.co/support/#api-key
+our @alphaqueries=();
+my $maxQueries = { quantity =>5 , seconds => 55}; # no more than x queries per y seconds
 
 my $ALPHAVANTAGE_URL =
     'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&outputsize=compact&datatype=json';
@@ -60,6 +68,7 @@ my %currencies_by_suffix = (
     '.H'   => "EUR",    # 		Hamburg
     '.HA'  => "EUR",    # 		Hanover
     '.MU'  => "EUR",    # 		Munich
+    '.ME'  => "RUB",    # Russia	Moscow
     '.SG'  => "EUR",    # 		Stuttgart
     '.DE'  => "EUR",    # 		XETRA
     '.HK'  => "HKD",    # Hong Kong
@@ -87,6 +96,7 @@ my %currencies_by_suffix = (
     '.MA'  => "EUR",    # 		Madrid
     '.VA'  => "EUR",    # 		Valence
     '.ST'  => "SEK",    # Sweden		Stockholm
+    '.HE'  => "EUR",    # Finland		Helsinki
     '.S'   => "CHF",    # Switzerland	Zurich
     '.TW'  => "TWD",    # Taiwan		Taiwan Stock Exchange
     '.TWO' => "TWD",    # 		OTC
@@ -94,11 +104,19 @@ my %currencies_by_suffix = (
     '.TH'  => "THB",    # 		??? From Asia.pm, (in Thai Baht)
     '.L'   => "GBP",    # United Kingdom	London
     '.IL'  => "USD",    # United Kingdom	London USD*100
+    '.VX'  => "CHF",    # Switzerland
+    '.SW'  => "CHF",    # Switzerland
 );
 
 
 sub methods {
-    return ( alphavantage => \&alphavantage, );
+    return ( alphavantage => \&alphavantage,
+             canada       => \&alphavantage,
+             usa          => \&alphavantage,
+             nyse         => \&alphavantage,
+             nasdaq       => \&alphavantage,
+             vanguard     => \&alphavantage,
+    );
 
     our @labels = qw/date isodate open high low close volume last/;
 
@@ -107,12 +125,30 @@ sub methods {
     }
 }
 
+sub sleep_before_query {
+    # wait till we can query again
+    my $q = $maxQueries->{quantity};
+    if ( $#alphaqueries >= $q ) {
+        my $time_since_x_queries = clock_gettime()-$alphaqueries[$q];
+        # print STDERR "LAST QUERY $time_since_x_queries\n";
+        if ($time_since_x_queries < $maxQueries->{seconds}) {
+            my $sleeptime = ($maxQueries->{seconds} - $time_since_x_queries) * 1000000;
+            # print STDERR "SLEEP $sleeptime\n";
+            usleep( $sleeptime );
+            # print STDERR "CONTINUE\n";
+        }
+    }
+    unshift @alphaqueries, clock_gettime();
+    pop @alphaqueries while $#alphaqueries>$q; # remove unnecessary data
+    # print STDERR join(",",@alphaqueries)."\n";
+}
+
 sub alphavantage {
     my $quoter = shift;
 
     my @stocks = @_;
     my $quantity = @stocks;
-    my ( %info, $reply, $url );
+    my ( %info, $reply, $url, $code, $desc, $body );
     my $ua = $quoter->user_agent();
 
     foreach my $stock (@stocks) {
@@ -130,11 +166,18 @@ sub alphavantage {
             . $ALPHAVANTAGE_API_KEY
             . '&symbol='
             . $stock;
-        $reply = $ua->request( GET $url);
 
-        my $code = $reply->code;
-        my $desc = HTTP::Status::status_message($code);
-        my $body = $reply->content;
+        my $get_content = sub {
+            sleep_before_query();
+            $reply = $ua->request( GET $url);
+
+            $code = $reply->code;
+            $desc = HTTP::Status::status_message($code);
+            $body = $reply->content;
+        };
+
+        &$get_content();
+
         if ($code != 200) {
             $info{ $stock, 'success' } = 0;
             $info{ $stock, 'errormsg' } = $desc;
@@ -148,6 +191,17 @@ sub alphavantage {
             $info{ $stock, 'errormsg' } = $@;
         }
 
+        my $try_cnt = 0;
+        while (($try_cnt < 5) && ($json_data->{'Information'} || $json_data->{'Note'})) {
+            # print STDERR "INFORMATION:".$json_data->{'Information'}."\n";
+            # print STDERR "NOTE:".$json_data->{'Note'}."\n";
+            # print STDERR "ADDITIONAL SLEEPING HERE !";
+            sleep (20);
+            &$get_content();
+            eval {$json_data = JSON::decode_json $body};
+            $try_cnt += 1;
+        }
+
         if ( !$json_data || $json_data->{'Error Message'} ) {
             $info{ $stock, 'success' } = 0;
             $info{ $stock, 'errormsg' } =
@@ -155,6 +209,12 @@ sub alphavantage {
             next;
         }
 
+        if (!$json_data->{'Meta Data'}) {
+            $info{ $stock, 'success' } = 0;
+            $info{ $stock, 'errormsg' } = ( $json_data->{'Information'} || "No useable data returned" ) ;
+            next;
+        }
+
         my $last_refresh = $json_data->{'Meta Data'}->{'3. Last Refreshed'}; # when market is open this returns an isodate + time, otherwise only the isodate
         $last_refresh = substr($last_refresh,0,10);  # remove time if returned
         if ( !$last_refresh ) {
@@ -203,7 +263,7 @@ sub alphavantage {
 
         # deduce currency
         if ( $stock =~ /(\..*)/ ) {
-            my $suffix = $1;
+            my $suffix = uc $1;
             if ( $currencies_by_suffix{$suffix} ) {
                 $info{ $stock, 'currency' } = $currencies_by_suffix{$suffix};
 
@@ -233,8 +293,6 @@ sub alphavantage {
 
         $info{ $stock, "currency_set_by_fq" } = 1;
 
-        $quantity--;
-        select(undef, undef, undef, .7) if ($quantity);
     }
 
     return wantarray() ? %info : \%info;
