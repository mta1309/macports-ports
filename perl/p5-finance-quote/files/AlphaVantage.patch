diff --git a/lib/Finance/Quote.pm b/lib/Finance/Quote.pm
index b66bca9..6703935 100644
--- lib/Finance/Quote.pm
+++ lib/Finance/Quote.pm
@@ -274,9 +274,9 @@ sub currency {
     if ( !$json_data || $json_data->{'Error Message'} ) {
       return undef;
     }
-#     print "Failed: " . $json_data->{'Information'} . "\n" if (($try_cnt < 5) && ($json_data->{'Information'}));
-    sleep (20) if (($try_cnt < 5) && ($json_data->{'Information'}));
-  } while (($try_cnt < 5) && ($json_data->{'Information'}));
+#     print "Failed: " . $json_data->{'Note'} . "\n" if (($try_cnt < 5) && ($json_data->{'Note'}));
+    sleep (20) if (($try_cnt < 5) && ($json_data->{'Note'}));
+  } while (($try_cnt < 5) && ($json_data->{'Note'}));
 
   my $exchange_rate = $json_data->{'Realtime Currency Exchange Rate'}->{'5. Exchange Rate'};
 
diff --git a/lib/Finance/Quote/AlphaVantage.pm b/lib/Finance/Quote/AlphaVantage.pm
index 6589a4e..113f4f5 100644
--- lib/Finance/Quote/AlphaVantage.pm
+++ lib/Finance/Quote/AlphaVantage.pm
@@ -201,7 +201,7 @@ sub alphavantage {
 
         my $try_cnt = 0;
         while (($try_cnt < 5) && ($json_data->{'Note'})) {
-            # print STDERR "INFORMATION:".$json_data->{'Note'}."\n";
+            # print STDERR "NOTE:".$json_data->{'Note'}."\n";
             # print STDERR "ADDITIONAL SLEEPING HERE !";
             sleep (20);
             &$get_content();
index 6589a4e..304a28d 100644
--- lib/Finance/Quote/AlphaVantage.pm
+++ lib/Finance/Quote/AlphaVantage.pm
@@ -14,10 +14,14 @@
 #    You should have received a copy of the GNU General Public License
 #    along with this program; if not, write to the Free Software
 #    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 #    02111-1307, USA
 
+# 2019-12-01: Added additional labels for net and p_change. Set
+#             close to previous close as returned in the JSON.
+#             Bruce Schuck (bschuck at asgard hyphen systems dot com)
+
 package Finance::Quote::AlphaVantage;
 
 require 5.005;
 
 our $VERSION = '1.49'; # VERSION
@@ -35,11 +39,11 @@ my $maxQueries = { quantity =>5 , seconds => 60}; # no more than x
                                                   # queries per y
                                                   # seconds, based on
                                                   # https://www.alphavantage.co/support/#support
 
 my $ALPHAVANTAGE_URL =
-    'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&outputsize=compact&datatype=json';
+    'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&datatype=json';
 my $ALPHAVANTAGE_API_KEY = $ENV{'ALPHAVANTAGE_API_KEY'};
 
 my %currencies_by_suffix = (
 
                         # Country		City/Exchange Name
@@ -121,11 +125,11 @@ sub methods {
              vanguard     => \&alphavantage,
     );
 }
 
 {
-    my @labels = qw/date isodate open high low close volume last/;
+    my @labels = qw/date isodate open high low close volume last net p_change/;
 
     sub labels {
         return ( alphavantage => \@labels, );
     }
 }
@@ -180,10 +184,11 @@ sub alphavantage {
             $reply = $ua->request( GET $url);
 
             $code = $reply->code;
             $desc = HTTP::Status::status_message($code);
             $body = $reply->content;
+            # print STDERR "AlphaVantage returned: $body\n";
         };
 
         &$get_content();
 
         if ($code != 200) {
@@ -214,61 +219,46 @@ sub alphavantage {
             $info{ $stock, 'errormsg' } =
                 $json_data->{'Error Message'} || $json_data->{'Information'};
             next;
         }
 
-        if (!$json_data->{'Meta Data'}) {
-            $info{ $stock, 'success' } = 0;
-            $info{ $stock, 'errormsg' } = ( $json_data->{'Information'} || "No useable data returned" ) ;
-            next;
-        }
-
-        my $last_refresh = $json_data->{'Meta Data'}->{'3. Last Refreshed'}; # when market is open this returns an isodate + time, otherwise only the isodate
-        $last_refresh = substr($last_refresh,0,10);  # remove time if returned
-        if ( !$last_refresh ) {
-            $info{ $stock, 'success' } = 0;
-            $info{ $stock, 'errormsg' } = "json_data doesn't contain Last Refreshed";
-            next;
-        }
-        my $isodate = substr( $last_refresh, 0, 10 );
-        if ( !$json_data->{'Time Series (Daily)'} ) {
-            $info{ $stock, 'success' } = 0;
-            $info{ $stock, 'errormsg' } = "json_data doesn't contain Time Series hash";
-            next;
-        }
-        if ( !$json_data->{'Time Series (Daily)'}->{$last_refresh} ) {
+        my $quote = $json_data->{'Global Quote'};
+        if ( !$quote ) {
             $info{ $stock, 'success' } = 0;
-            $info{ $stock, 'errormsg' } = "json_data doesn't contain latest refresh data in Time Series hash";
-            next;
-        }
-
-        my %ts = %{ $json_data->{'Time Series (Daily)'}->{$last_refresh} };
-        if ( !%ts ) {
-            $info{ $stock, 'success' }  = 0;
-            $info{ $stock, 'errormsg' } = 'Could not extract Time Series data';
+            $info{ $stock, 'errormsg' } = "json_data doesn't contain Global Quote";
             next;
         }
 
         # %ts holds data as
         #  {
-        #     '1. open'     151.5400,
-        #     '2. high'     151.5900,
-        #     '3. low'      151.5300,
-        #     '4. close'    151.5900,
-        #     '5. volume'   57620
+        #     "Global Quote": {
+        #         "01. symbol": "SOLB.BR",
+        #         "02. open": "104.2000",
+        #         "03. high": "104.9500",
+        #         "04. low": "103.4000",
+        #         "05. price": "104.0000",
+        #         "06. volume": "203059",
+        #         "07. latest trading day": "2019-11-29",
+        #         "08. previous close": "105.1500",
+        #         "09. change": "-1.1500",
+        #         "10. change percent": "-1.0937%"
+        #     }
         # }
 
         $info{ $stock, 'success' } = 1;
-        $info{ $stock, 'symbol' }  = $json_data->{'Meta Data'}->{'2. Symbol'};
-        $info{ $stock, 'open' }    = $ts{'1. open'};
-        $info{ $stock, 'close' }   = $ts{'4. close'};
-        $info{ $stock, 'last' }    = $ts{'4. close'};
-        $info{ $stock, 'high' }    = $ts{'2. high'};
-        $info{ $stock, 'low' }     = $ts{'3. low'};
-        $info{ $stock, 'volume' }  = $ts{'5. volume'};
+        $info{ $stock, 'success' }  = 1;
+        $info{ $stock, 'symbol' }   = $quote->{'01. symbol'};
+        $info{ $stock, 'open' }     = $quote->{'02. open'};
+        $info{ $stock, 'high' }     = $quote->{'03. high'};
+        $info{ $stock, 'low' }      = $quote->{'04. low'};
+        $info{ $stock, 'last' }     = $quote->{'05. price'};
+        $info{ $stock, 'volume' }   = $quote->{'06. volume'};
+        $info{ $stock, 'close' }    = $quote->{'08. previous close'};
+        $info{ $stock, 'net' }      = $quote->{'09. change'};
+        $info{ $stock, 'p_change' } = $quote->{'10. change percent'};
         $info{ $stock, 'method' }  = 'alphavantage';
-        $quoter->store_date( \%info, $stock, { isodate => $isodate } );
+        $quoter->store_date( \%info, $stock, { isodate => $quote->{'07. latest trading day'} } );
 
         # deduce currency
         if ( $stock =~ /(\..*)/ ) {
             my $suffix = uc $1;
             if ( $currencies_by_suffix{$suffix} ) {

