
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           bitbucket 1.0

name                pypy
bitbucket.setup     pypy pypy 5.8.0 {release-pypy${python.branch}-v}
categories          lang python devel
license             MIT PSF
maintainers         {jmr @jmroot} openmaintainer

platforms           darwin

homepage            http://pypy.org/
use_bzip2           yes
distname            pypy2-v${version}-src
bitbucket.tarball_from \
                    downloads
checksums           rmd160  02d055ecabd3bc8e8dac6d43db0a170549cadfb6 \
                    sha256  504c2d522595baf8775ae1045a217a2b120732537861d31b889d47c340b58bd5

depends_build       port:pkgconfig
depends_lib         port:libffi \
                    port:sqlite3 \
                    port:bzip2 \
                    path:lib/libssl.dylib:openssl \
                    port:gettext \
                    port:gdbm \
                    port:ncurses

patchfiles          darwin.py.diff \
                    make_output.diff \
                    ffiplatform.py.diff \
                    paths.diff

subport pypy3 {
    set port_version ${version}
    version        "${version}-beta"
    set python.branch 3.5
    set python.libdir 3

    depends_lib-append port:xz
    depends_build-replace port:pypy-bootstrap port:pypy

    distname            pypy3-v${port_version}-src

    checksums           rmd160  4d251e8d1b76f99d4d51ef6e231c3e98e2cce782 \
                        sha256  9d090127335c3c0fd2b14c8835bf91752e62756e55ea06aad3353f24a6854223

    set pypy_c_name pypy3-c
}

if {$subport == ${name}} {
    set python.branch 2.7
    set python.libdir 2.7


    set pypy_c_name pypy-c
}

description         A fast interpreter for Python ${python.branch}
long_description \
    PyPy is a replacement for CPython ${python.branch}. The main reason to use it \
    instead of CPython is speed, as it runs generally faster.

post-patch {
    reinplace "s|__PREFIX__|${prefix}|" ${worksrcpath}/lib_pypy/cffi/ffiplatform.py \
                                        ${worksrcpath}/pypy/tool/cpyext/extbuild.py \
                                        ${worksrcpath}/rpython/translator/platform/distutils_platform.py

    # delete VIM swap files accidentally included with pypy3 up to and
    # including 5.8.0
    exec find ${worksrcpath} -name "*.swn" -delete
}

use_configure       no

# use pypy to build if it's already installed, and we're not in trace mode
if {![tbool ports_trace] && [file executable ${prefix}/lib/pypy/pypy]} {
    build.cmd       ${prefix}/lib/pypy/pypy
} else {
    if {${os.platform} eq "darwin" && ${os.arch} eq "i386" && ![catch {sysctl hw.cpu64bit_capable} is64bit] && $is64bit == 1} {
        depends_build-append port:pypy-bootstrap
        build.cmd       ${prefix}/lib/pypy-bootstrap/bin/pypy
    } else {
        depends_build-append port:python27
        build.cmd       ${prefix}/bin/python2.7
    }
}

# a lot of memory is used before the C compiler even runs, so limit build.jobs
# according to available memory more tightly than the default
if {![catch {sysctl hw.memsize} memsize]} {
    if {$build_arch eq "x86_64" || $build_arch eq "ppc64"} {
        incr memsize -4000000000
    } else {
        incr memsize -2000000000
    }
    if {$memsize <= 0} {
        build.jobs 1
    } elseif {${build.jobs} > $memsize / 1000000000 + 1} {
        build.jobs [expr {$memsize / 1000000000 + 1}]
    }
}

# memory usage bug in gcc 4.2 on x86_64
if {$build_arch eq "x86_64"} {
    compiler.blacklist gcc-4.2
}

platform darwin {
    # use arch -foo if available
    if {${os.major} >= 9} {
        build.cmd arch -${build_arch} ${build.cmd}
    }
}
build.env           PYPY_USESSION_DIR=${workpath} PYPY_LOCALBASE=${prefix} \
                    CFLAGS="${configure.cc_archflags} ${configure.cppflags}" \
                    LDFLAGS="${configure.ld_archflags} ${configure.ldflags}"

build.dir           ${worksrcpath}/pypy/goal
build.args          --batch --verbose \
                    --cc=${configure.cc} --opt=jit \
                    --make-jobs=${build.jobs}
build.target        ../../rpython/bin/rpython
build.post_args     targetpypystandalone

destroot.env        ${build.env}
destroot.dir        ${worksrcpath}/pypy/tool/release
destroot.args       --builddir ${destroot}${prefix}/lib \
                    --archive-name ${subport} \
                    --without-tk
destroot.target     package.py
destroot.post_args

# JIT is not available on powerpc at present
if {${os.arch} ne "i386"} {
    build.args-delete --opt=jit
    build.args-append --opt=3
}

post-build {
    # some modules have to be compiled in an extra step
    foreach script {_audioop_build.py _curses_build.py _pwdgrp_build.py _sqlite3_build.py _syslog_build.py} {
        system -W ${worksrcpath}/lib_pypy "${build.dir}/${pypy_c_name} $script"
    }
}

post-destroot {
    file delete ${destroot}${prefix}/lib/${subport}.tar.bz2
    ln -s ../lib/${subport}/bin/${subport} ${destroot}${prefix}/bin
}

variant opt1 description {use optimization level 1 for faster build (but slower execution)} {
    depends_lib-append port:boehmgc
    build.args-delete  --opt=3 --opt=jit
    build.args-append  --opt=1
}
