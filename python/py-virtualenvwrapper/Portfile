# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           python 1.0

name                py-virtualenvwrapper
set real_name       virtualenvwrapper
version             4.7.2
platforms           darwin
supported_archs     noarch
license             MIT
maintainers         nomaintainer

description         Enhancements to virtualenv
long_description    virtualenvwrapper is a set of extensions to Ian \
                    Bicking's virtualenv tool. The extensions include \
                    wrappers for creating and deleting virtual \
                    environments and otherwise managing your \
                    development workflow, making it easier to work on \
                    more than one project at a time without \
                    introducing conflicts in their dependencies.
homepage            http://www.doughellmann.com/projects/${real_name}/

master_sites        pypi:v/${real_name}
distname            ${real_name}-${version}

checksums           rmd160  533920ae3ed6e1eb9cf978ce15ec55fedaa7b47c \
                    sha256  63cffd24148c969245cceff561b18ba0b5b2b48dcb059e71425adad2d4ffe349

python.versions     27 34 35 36

if {${name} ne ${subport}} {
    depends_lib-append  port:py${python.version}-pbr \
                        port:py${python.version}-setuptools \
                        port:py${python.version}-stevedore \
                        port:py${python.version}-virtualenv \
                        port:py${python.version}-virtualenv-clone

    notes "
You might need to set some variables and source the shell script. For example:

export VIRTUALENVWRAPPER_PYTHON='${prefix}/bin/python${python.branch}'
export VIRTUALENVWRAPPER_VIRTUALENV='${prefix}/bin/virtualenv-${python.branch}'
export VIRTUALENVWRAPPER_VIRTUALENV_CLONE='${prefix}/bin/virtualenv-clone-${python.branch}'
source ${prefix}/bin/virtualenvwrapper.sh-${python.branch}
"

    livecheck.type      none
} else {
    livecheck.type      pypi
}
