# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.0
PortGroup           github 1.0
PortGroup           muniversal 1.0
PortGroup           cxx11 1.1
PortGroup           compiler_blacklist_versions 1.0

name                uhd
categories          science comms
maintainers         {michaelld @michaelld}
description         USRP Hardware Driver for Ettus Research Products
license             GPL-3+
platforms           darwin

if {${subport} eq ${name}} {

    long_description ${description}: \
Provides the release version, which is typically updated every month or so.

    github.setup    EttusResearch uhd 3.13.0.1 v
    conflicts       uhd-devel uhd-39lts
    checksums       rmd160 5fc8411ea3ff1807a5f910e480662bf0d0cd6dce \
                    sha256 b3ba5750ebf7f55f9353d96396d530d6c47f14606cca4ffc28e0d4ad115f20be \
                    size   9410040

    # set the version override string

    set UHD_VERSION_INFO "Release"

    # overload the github livecheck regex to look for versions that
    # are just numbers and '.', no letters (e.g., "3.7.3_rc2").

    github.livecheck.regex  {([0-9.]+)}

    # temporary patch to disable Boost DIRS before internal DIRS

    patchfiles-append patch-host_CMakeLists.txt.release.diff
    patch.pre_args -p1

}

subport uhd-39lts {

    long_description ${description}: \
Provides UHD 3.9 Long-Term Service \(LTS\) branch. This branch is not updated except for compatibility with OSs released after it was finalized.

    name            uhd-39lts
    conflicts       uhd uhd-devel
    github.setup    EttusResearch uhd UHD-3.9.LTS
    version         3.9-LTS
    checksums       rmd160 0765543ffdc36df568012640422fda8c70809f62 \
                    sha256 a6b4055c5d2d007c978c6577d87151ce9d505d6f5c116f0d20f176497424147e \
                    size   2463897

    # set the version override string

    set UHD_VERSION_INFO "${version}"

    # temporary patch to disable Boost DIRS before internal DIRS

    patchfiles-append patch-host_CMakeLists.txt.39lts.diff
    patch.pre_args -p1

}

subport uhd-devel {

    long_description ${description}: \
Provides the UHD GIT maint or master branch, depending on which is more advanced, and is typically updated every few days to week.

    name            uhd-devel
    conflicts       uhd uhd-39lts
    github.setup    EttusResearch uhd 98057752006b5c567ed331c5b14e3b8a281b83b9
    version         20180801
    checksums       rmd160 cf0df34871703b51e76c095833cc2e753af2d65c \
                    sha256 ce8a9b4c00b62b1114aa584bd69cb3c2cc80895e482d286ef5c5bfb5a5df0424 \
                    size   9419550

    # set the version override string

    set UHD_VERSION_INFO "git-[string range ${github.version} 0 7](${version})"

    # temporary patch to disable Boost DIRS before internal DIRS

    patchfiles-append patch-host_CMakeLists.txt.devel.diff
    patch.pre_args -p1

    # set the variable UHD_VERSION_DEVEL to TRUE, no matter its current setting
    post-patch {
        reinplace "s@^SET\(UHD_VERSION_DEVEL\[^\)\]*@SET(UHD_VERSION_DEVEL TRUE@1" \
            ${worksrcpath}/host/cmake/Modules/UHDVersion.cmake
    }

    variant python_api \
        description {enable Python API support (experimental)} {
        depends_lib-append port:py${PythonVersionNoDot}-numpy
        configure.args-append \
            -DENABLE_PYTHON_API=ON \
            -DPYTHON_INCLUDE_DIR=${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/Headers \
            -DPYTHON_LIBRARY=${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/Python \
            -DUHD_PYTHON_DIR=${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/lib/python${PythonVersionWithDot}/site-packages
    }

    if {![variant_isset python_api]} {
        configure.args-append -DENABLE_PYTHON_API=OFF
    }

    default_variants +python_api    
}

# override the github Portgroup's homepage setting

homepage             http://uhd.ettus.com/

if {${subport} ne "uhd-39lts"} {
    # require a compiler that supports thread_local storage,
    # which was introduced in 3.11.0.0.
    # see also < https://trac.macports.org/ticket/55980 >
    compiler.blacklist-append { clang < 800 }
}

depends_lib-append   port:boost port:ncurses

depends_build-append port:pkgconfig

# do VPATH (out of source tree) build

cmake.out_of_source yes

# remove top-level library path, such that internal libraries are used
# instead of any already-installed ones.

configure.ldflags-delete -L${prefix}/lib

# set last configure argument to the relative path
# to the top-level cmake source

configure.post_args ../${worksrcdir}/host

# explicitly set CMake flags to get MacPorts' curses;
# these are used by some variants, and won't hurt the others.

configure.args-append \
    -DCURSES_CURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_FORM_LIBRARY=${prefix}/lib/libform.dylib \
    -DCURSES_INCLUDE_PATH=${prefix}/include \
    -DCURSES_LIBRARY=${prefix}/lib/libcurses.dylib \
    -DCURSES_NCURSES_LIBRARY=${prefix}/lib/libncurses.dylib

# override default version string to be MacPorts-specific

configure.args-append \
    -DUHD_GIT_COUNT="MacPorts" \
    -DUHD_GIT_HASH="${UHD_VERSION_INFO}"

# directory to install shared UHD files
# (examples, images, modules, tests, utilities)

configure.args-append \
    -DPKG_LIB_DIR=${prefix}/share/uhd

# directory to install all CMake files; internal appends "uhd"

configure.args-append \
    -DCMAKE_MODULES_DIR=${prefix}/share/cmake

# on much older installs ...

if {${configure.cxx_stdlib} eq "macports-libstdc++" ||
    ${configure.cxx_stdlib} eq "libstdc++"} {

    # for some reason cmake doesn't recognize libstdc++ compilers as
    # being c++11 capable, even though some are. set this and hope for
    # the best.

    configure.cxxflags-append -std=gnu++11

    # when using GCC on older OSX, certain math functions will not be
    # part of std:: without this macro defined. This macro required
    # c++11 to be enabled, which is addressed in the next item.

    configure.cxxflags-append -D_GLIBCXX_USE_C99_MATH_TR1

    # enable C/CXX standard extensions (e.g., "gnu++11" and "gnu11"
    # instead of than "c++11" and "c11"). UHD itself does not require
    # these extensions, but when compiling with GCC on older OSX they
    # allow for various various math functions to be in std:: ... so,
    # enable them.

    configure.args-append \
        -DCMAKE_CXX_EXTENSIONS=ON \
        -DCMAKE_C_EXTENSIONS=ON

} else {

    # disable C/CXX standard extensions (e.g., "gnu++11" and "gnu11"
    # rather than "c++11" and "c11"). UHD itself does not require
    # these extensions, and when compiling with Clang they don't
    # really do anything anyway; so, just disable them.

    configure.args-append \
        -DCMAKE_CXX_EXTENSIONS=OFF \
        -DCMAKE_C_EXTENSIONS=OFF

}

# per user concensus: enable all variants except +debug and +universal

default_variants +docs +examples +libusb +manual +test +manpages +gpsd

# select Python to use; default to 2.7

variant python27 conflicts python34 python35 python36 description {Build using Python 2.7} {}
variant python34 conflicts python27 python35 python36 description {Build using Python 3.4} {}
variant python35 conflicts python27 python34 python36 description {Build using Python 3.5} {}
variant python36 conflicts python27 python34 python35 description {Build using Python 3.6} {}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    default_variants +python27
}

if {![variant_isset python27] &&
    ![variant_isset python34] &&
    ![variant_isset python35] &&
    ![variant_isset python36]} {
    ui_error "\n\nYou must select one of the variants +python27 , +python34 , +python35, or +python36 .\n"
    return -code error "Invalid variant selection"
}

set PythonVersionNoDot ""
if {[variant_isset python27]} {
    set PythonVersionNoDot "27"
} elseif {[variant_isset python34]} {
    set PythonVersionNoDot "34"
} elseif {[variant_isset python35]} {
    set PythonVersionNoDot "35"
} else {
    set PythonVersionNoDot "36"
}
set PythonVersionWithDot [join [split ${PythonVersionNoDot} ""] "."]

# required Python

depends_lib-append \
    port:python${PythonVersionNoDot} \
    port:py${PythonVersionNoDot}-requests \
    port:py${PythonVersionNoDot}-mako

# specify the Python version to use

set PythonExe "${frameworks_dir}/Python.framework/Versions/${PythonVersionWithDot}/bin/python${PythonVersionWithDot}"

configure.args-append \
    -DPYTHON_EXECUTABLE=${PythonExe}

# remove this before committing
configure.cxxflags-append -Wall

# after destroot, have uhd fetch its images into the
# destroot area, so that they are also tracked by MacPorts

post-destroot {

    ui_debug "Fetching images:"
    ui_debug "${PythonExe} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --install-location=${destroot}${prefix}/share/uhd/images"
    system "${PythonExe} ${destroot}${prefix}/share/uhd/utils/uhd_images_downloader.py --verbose --install-location=${destroot}${prefix}/share/uhd/images"

}

variant test description {enable tests} {
    configure.args-append -DENABLE_TESTS=ON
    test.run yes
}

if {![variant_isset test]} {
    configure.args-append -DENABLE_TESTS=OFF
}

variant examples description {enable examples} {
    configure.args-append -DENABLE_EXAMPLES=ON
}

if {![variant_isset examples]} {
    configure.args-append -DENABLE_EXAMPLES=OFF
}

variant libusb description {enable USB support via libusb version 1.0} {
    depends_lib-append path:lib/libusb-1.0.dylib:libusb
    configure.args-append \
        -DENABLE_USB=ON \
        -DLIBUSB_INCLUDE_DIRS=${prefix}/include/libusb-1.0
}

if {![variant_isset libusb]} {
    configure.args-append -DENABLE_USB=OFF
} else {
    # if using +libusb, enable E300 too
    configure.args-append -DENABLE_E300=ON
}

variant docs description {build documentation} {
    depends_lib-append port:doxygen
    configure.args-append -DENABLE_DOXYGEN=ON
}

if {![variant_isset docs]} {
    configure.args-append -DENABLE_DOXYGEN=OFF
}

variant manual description {build manual} {
    depends_lib-append port:py${PythonVersionNoDot}-docutils
    configure.args-append -DENABLE_MANUAL=ON
}

if {![variant_isset manual]} {
    configure.args-append -DENABLE_MANUAL=OFF
}

variant manpages description {build man pages} {
    depends_run-append port:gzip
    configure.args-append -DENABLE_MAN_PAGES=ON
}

if {![variant_isset manpages]} {
    configure.args-append -DENABLE_MAN_PAGES=OFF
}

variant gpsd description {enable gpsd support} {
    depends_lib-append port:gpsd
    configure.args-append -DENABLE_GPSD=ON \
        -DLIBGPS_LIBRARY=${prefix}/lib/libgps.dylib \
        -DLIBGPS_INCLUDE_DIR=${prefix}/include
}

if {![variant_isset gpsd]} {
    configure.args-append -DENABLE_GPSD=OFF
}
