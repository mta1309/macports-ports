diff --git src/spice-widget-egl.c src/spice-widget-egl.c
--- src/spice-widget-egl.c
+++ src/spice-widget-egl.c
@@ -23,6 +23,9 @@
 #define GL_GLEXT_PROTOTYPES
 
 #include "spice-widget.h"
+
+#ifndef GDK_WINDOWING_QUARTZ
+
 #include "spice-widget-priv.h"
 #include "spice-gtk-session-priv.h"
 #include <libdrm/drm_fourcc.h>
@@ -679,3 +682,4 @@ gboolean spice_egl_update_scanout(SpiceD
 
     return TRUE;
 }
+#endif
diff --git src/spice-widget-priv.h src/spice-widget-priv.h
--- src/spice-widget-priv.h
+++ src/spice-widget-priv.h
@@ -24,7 +24,7 @@
 #include <windows.h>
 #endif
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
 #include <epoxy/egl.h>
 #endif
 
@@ -127,7 +127,7 @@ struct _SpiceDisplayPrivate {
     int                     x11_accel_denominator;
     int                     x11_threshold;
 #endif
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     struct {
         gboolean            context_ready;
         gboolean            enabled;
diff --git src/spice-widget.c src/spice-widget.c
--- src/spice-widget.c
+++ src/spice-widget.c
@@ -235,7 +235,7 @@ static gint get_display_id(SpiceDisplay 
 
 static bool egl_enabled(SpiceDisplayPrivate *d)
 {
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     return d->egl.enabled;
 #else
     return false;
@@ -567,7 +567,7 @@ static void grab_notify(SpiceDisplay *di
 }
 
 #if GTK_CHECK_VERSION(3,16,0)
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
 static gboolean
 gl_area_render(GtkGLArea *area, GdkGLContext *context, gpointer user_data)
 {
@@ -636,7 +636,7 @@ static void spice_display_init(SpiceDisp
     gtk_stack_set_visible_child(d->stack, area);
 
 #if GTK_CHECK_VERSION(3,16,0)
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     area = gtk_gl_area_new();
     gtk_gl_area_set_required_version(GTK_GL_AREA(area), 3, 2);
     gtk_gl_area_set_auto_render(GTK_GL_AREA(area), false);
@@ -1221,7 +1221,7 @@ static gboolean do_color_convert(SpiceDi
     return true;
 }
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
 static void set_egl_enabled(SpiceDisplay *display, bool enabled)
 {
     SpiceDisplayPrivate *d = display->priv;
@@ -1257,7 +1257,7 @@ static gboolean draw_event(GtkWidget *wi
     SpiceDisplayPrivate *d = display->priv;
     g_return_val_if_fail(d != NULL, false);
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     if (egl_enabled(d) &&
         g_str_equal(gtk_stack_get_visible_child_name(d->stack), "draw-area")) {
         spice_egl_update_display(display);
@@ -2016,7 +2016,7 @@ static void size_allocate(GtkWidget *wid
         d->ww = conf->width;
         d->wh = conf->height;
         recalc_geometry(widget);
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
         if (egl_enabled(d))
             spice_egl_resize_display(display, conf->width, conf->height);
 #endif
@@ -2059,7 +2059,7 @@ static void realize(GtkWidget *widget)
 static void unrealize(GtkWidget *widget)
 {
     spice_cairo_image_destroy(SPICE_DISPLAY(widget));
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     spice_egl_unrealize_display(SPICE_DISPLAY(widget));
 #endif
 
@@ -2377,7 +2377,7 @@ static void update_area(SpiceDisplay *di
         .height = height
     };
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     if (egl_enabled(d)) {
         const SpiceGlScanout *so =
             spice_display_get_gl_scanout(SPICE_DISPLAY_CHANNEL(d->display));
@@ -2474,7 +2474,7 @@ static void invalidate(SpiceChannel *cha
         .height = h
     };
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     set_egl_enabled(display, false);
 #endif
 
@@ -2538,7 +2538,7 @@ static void cursor_set(SpiceCursorChanne
     } else
         g_warn_if_reached();
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     if (egl_enabled(d))
         spice_egl_cursor_set(display);
 #endif
@@ -2708,7 +2708,7 @@ static void inputs_channel_event(SpiceCh
     spice_display_set_keypress_delay(display, delay);
 }
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
 G_GNUC_INTERNAL
 void spice_display_widget_gl_scanout(SpiceDisplay *display)
 {
@@ -2814,7 +2814,7 @@ static void channel_new(SpiceSession *s,
             mark(display, primary.marked);
         }
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
         spice_g_signal_connect_object(channel, "notify::gl-scanout",
                                       G_CALLBACK(spice_display_widget_gl_scanout),
                                       display, G_CONNECT_SWAPPED);
@@ -2974,7 +2974,7 @@ GdkPixbuf *spice_display_get_pixbuf(Spic
     g_return_val_if_fail(d != NULL, NULL);
     g_return_val_if_fail(d->display != NULL, NULL);
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(GDK_WINDOWING_QUARTZ)
     if (egl_enabled(d)) {
         GdkPixbuf *tmp;
 
